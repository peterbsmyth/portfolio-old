function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split("&");
    for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split("=");
        if (sParameterName[0] == sParam) {
            return sParameterName[1];
        }
    }
}

// From: http://stackoverflow.com/questions/19491336/get-url-parameter-jquery
//Candidate for improvement, add to Date.prototype
function addDays(date, days) {
    var result = new Date(date);
    result.setDate(date.getDate() + days);
    return result;
}

// From: http://stackoverflow.com/questions/563406/add-days-to-datetime
Date.prototype.toJSONLocal = function() {
    function addZ(n) {
        return (n < 10 ? "0" : "") + n;
    }
    return this.getFullYear() + "-" + addZ(this.getMonth() + 1) + "-" + addZ(this.getDate());
};

// From : http://stackoverflow.com/questions/11382606/javascript-date-tojson-dont-get-the-timezone-offset
Date.prototype.toDateInputValue = function() {
    var local = new Date(this);
    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
    return local.toJSON().slice(0, 10);
};

// From: http://stackoverflow.com/questions/6982692/html5-input-type-date-default-value-to-today
Date.prototype.toDatetimeInputValue = function() {
    var local = new Date(this);
    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
    return local.toJSON().slice(0, 19);
};

Date.prototype.toHoursDotMinutes = function() {
    var minutes = this.getMinutes() / 60;
    var hours = this.getHours();
    return hours + minutes;
};

Date.prototype.toDurationFormat = function() {
    var hours = this.getHours();
    var minutes = this.getMinutes();
    return hours + ":" + minutes;
};

Date.prototype.toChartDurationFormat = function() {
    var hours = this.getHours();
    var minutes = this.getMinutes();
    return hours + " Hrs" + " " + minutes + " Mins";
};

//Candidate for improvement, add to Date.prototype
var makeUTCDate = function(dateString) {
    var d = new Date(dateString);
    return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes());
};

Date.prototype.addMinutes = function(minutes) {
    return new Date(this.getTime() + minutes * 6e4);
};

//Candidate for improvement, add to String.prototype
var durationToMinutes = function(duration) {
    var hours = parseInt(duration.substr(0, 2), 10) * 60;
    var minutes = parseInt(duration.substr(3, 2), 10);
    return hours + minutes;
};

var datetimeFormat = function(datetimestring) {
    //Expects string formatted "YYYY-MM-DDTHH:MM:SS"
    var x = datetimestring;
    var y, mm, dd, yyyy, hh, mi;
    y = x.substr(5, 2) + "/" + x.substr(8, 2) + "/" + x.substr(0, 4) + " ";
    hh = parseInt(x.substr(11, 2), 10);
    mi = x.substr(14, 2);
    if (hh > 12) {
        hh -= 12;
        y += hh + ":" + mi + " PM";
        return y;
    } else if (hh === 0) {
        y += 12 + ":" + mi + " AM";
        return y;
    } else if (hh === 12) {
        y += hh + ":" + mi + " PM";
        return y;
    } else {
        y += hh + ":" + mi + " AM";
        return y;
    }
};

var startFormat = function(x) {
    //Expects string formatted "YYYY-MM-DD HH:mm:SS"
    //Returns HH:mm AM/PM
    var hh = parseInt(x.substr(11, 2), 10);
    var mm = x.substr(14, 2);
    var final;
    if (hh > 12) {
        hh -= 12;
        final = hh + ":" + mm + " PM";
        return final;
    } else if (hh === 0) {
        final = 12 + ":" + mm + " AM";
        return final;
    } else if (hh === 12) {
        final = hh + ":" + mi + " PM";
        return final;
    } else {
        final = hh + ":" + mm + " AM";
        return final;
    }
};

var durationFormat = function(x) {
    //Expects string formatted "HH:mm:SS"
    var hh = x.substr(0, 2);
    var mm = x.substr(3, 2);
    if (parseInt(hh, 10) === 0) {
        return mm + "mins";
    }
    return hh + " Hrs, " + mm + " Mins";
};

String.prototype.toDateFormat = function() {
    //Expects string formatted "YYYY-MM-DD"
    return this.substr(5, 2) + "/" + this.substr(8, 2) + "/" + this.substr(0, 4);
};

String.prototype.toHoursDotMinutes = function() {
    //Expects string formatted "HH:mm:SS"
    return parseInt(this.substr(0, 2)) + parseInt(this.substr(3, 2)) / 60;
};

var getY0 = function(datestring) {
    //Expects string formatted "YYYY-MM-DD HH:mm:SS"
    var hh = parseInt(datestring.substr(11, 2), 10);
    var mm = parseInt(datestring.substr(14, 2), 10);
    return hh + mm / 60;
};

//Candidate for Improvement Add Error Handling to AJAX functions
//variables for dayTable + summaryTable tds
var pillar, datetime, duration, quality, notes;

//Build dayTable given a date
var buildTable = function(selectedDate) {
    //Build Data String
    var startDay = selectedDate;
    var endDay = startDay + "T23:59:59";
    $.getJSON("functions.php", {
        content: "pillarsLog",
        startDay: startDay,
        endDay: endDay
    }, function(response) {
        // console.log(response);
        //empty current table.
        var $tableBody = $("#dayTable TBODY");
        $tableBody.empty();
        //add new table
        response.forEach(function(item) {
            var $row = $("<tr>").attr("id", item.id);
            //candidate for learning ... difference between "<td>" and "td"
            var $edit = $("<td>").addClass("edit");
            //use BootStrap pencil glyphicon
            $("<a href='#'></a>").addClass("okay glyphicon glyphicon-pencil").appendTo($edit);
            $("<a href='#'></a>").addClass("cancel glyphicon glyphicon-remove").hide().appendTo($edit);
            $row.append($edit);
            var $pillar = $("<td>").html(item.pillar).addClass("pillar");
            $row.append($pillar);
            var $datetime = $("<td>").html(datetimeFormat(item.event_date)).addClass("datetime");
            $row.append($datetime);
            var $duration = $("<td>").html(item.duration).addClass("duration");
            $row.append($duration);
            var $quality = $("<td>").html(item.quality).addClass("quality");
            $row.append($quality);
            var $notes = $("<td>").html(item.notes).addClass("notes");
            $row.append($notes);
            $tableBody.append($row);
        });
        $("#dayTable").trigger("update");
        // console.log(response);
    });
};

var donutChart = function(selectedDate) {
    var startDay = selectedDate;
    var endDay = startDay + "T23:59:59";
    $.getJSON("functions.php", {
        content: "dayCumulativeDuration",
        startDay: startDay,
        endDay: endDay
    }, function(data) {
        // console.log("donut chart...");
        // console.log(data);
        //chart
        data.forEach(function(d) {
            d.duration = +d.duration;
        });
        var width = 960, height = 500, radius = Math.min(width, height) / 2;
        var color = d3.scale.ordinal().range([ "#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00" ]);
        var arc = d3.svg.arc().outerRadius(radius - 10).innerRadius(radius - 70);
        var pie = d3.layout.pie().sort(null).value(function(d) {
            return d.duration;
        });
        var svg = d3.select("body").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
        var g = svg.selectAll(".arc").data(pie(data)).enter().append("g").attr("class", "arc");
        g.append("path").attr("d", arc).style("fill", function(d) {
            return color(d.data.pillar);
        });
        g.append("text").attr("transform", function(d) {
            return "translate(" + arc.centroid(d) + ")";
        }).attr("dy", ".35em").style("text-anchor", "middle").text(function(d) {
            return d.data.pillar;
        });
    });
};

//Build summaryTable given a date
var buildSummary = function(startSummary, endSummary) {
    //Build Data String
    $.getJSON("functions.php", {
        content: "summary",
        startSummary: startSummary,
        endSummary: endSummary
    }, function(response) {
        //empty current table
        var $tableBody = $("#summaryTable TBODY");
        $tableBody.empty();
        //add new table
        response.forEach(function(item) {
            var $row = $("<tr>").attr("id", item.id);
            var $edit = $("<td>").addClass("edit");
            //use BootStrap pencil glyphicon
            $("<a href='#'></a>").addClass("okay glyphicon glyphicon-pencil").appendTo($edit);
            $("<a href='#'></a>").addClass("cancel glyphicon glyphicon-remove").hide().appendTo($edit);
            $row.append($edit);
            var $date = $("<td>").html(item.event_date.toDateFormat()).addClass("date");
            $row.append($date);
            var $quality = $("<td>").html(item.quality).addClass("quality");
            $row.append($quality);
            var $notes = $("<td>").html(item.notes).addClass("notes");
            $row.append($notes);
            $tableBody.append($row);
        });
        $("#summaryTable").trigger("update");
    });
};

//Update dayTable with new Entry
$("#single-entry").on("submit", function(event) {
    event.preventDefault();
    $("#addEntryModal").modal("hide");
    //build data string
    var data = $(this).serialize() + "&content=newEntry";
    $.ajax({
        type: "POST",
        url: "functions.php",
        data: data,
        dataType: "json",
        success: function(response) {
            var $row = $("<tr>").attr("id", response.id);
            var $edit = $("<td>").addClass("edit");
            //use BootStrap pencil glyphicon
            $("<a href='#'></a>").addClass("okay glyphicon glyphicon-pencil").appendTo($edit);
            $("<a href='#'></a>").addClass("cancel glyphicon glyphicon-remove").hide().appendTo($edit);
            $row.append($edit);
            var $pillar = $("<td>").html(response.pillar).addClass("pillar");
            $row.append($pillar);
            var $datetime = $("<td>").html(datetimeFormat(response.event_date)).addClass("datetime");
            $row.append($datetime);
            var $duration = $("<td>").html(response.duration).addClass("duration");
            $row.append($duration);
            var $quality = $("<td>").html(response.quality).addClass("quality");
            $row.append($quality);
            var $notes = $("<td>").html(response.notes).addClass("notes");
            $row.append($notes);
            $("#dayTable TBODY").append($row);
            $("#dayTable").trigger("update");
        }
    });
});

//Update summaryTable with new Entry
$("#summary-entry").on("submit", function(event) {
    event.preventDefault();
    $("#addSummaryModal").modal("hide");
    //build data string
    var data = $(this).serialize() + "&content=newSummary";
    $.ajax({
        type: "POST",
        url: "functions.php",
        data: data,
        dataType: "json",
        success: function(response) {
            var $row = $("<tr>").attr("id", response.id);
            var $edit = $("<td>").addClass("edit");
            //use BootStrap pencil glyphicon
            $("<a href='#'></a>").addClass("okay glyphicon glyphicon-pencil").appendTo($edit);
            $("<a href='#'></a>").addClass("cancel glyphicon glyphicon-remove").hide().appendTo($edit);
            $row.append($edit);
            var $date = $("<td>").html(response.event_date.toDateFormat()).addClass("date");
            $row.append($date);
            var $quality = $("<td>").html(response.quality).addClass("quality");
            $row.append($quality);
            var $notes = $("<td>").html(response.notes).addClass("notes");
            $row.append($notes);
            $("#summaryTable TBODY").append($row);
            $("#summaryTable").trigger("update");
        }
    });
});

//Edit Rows on DayTable
$("#dayTable").on("click", ".okay", function() {
    var $editRow = $(this).closest("tr");
    //Toggle Edit Mode
    $editRow.toggleClass("editMode");
    //Is edit mode active?
    var hasEditMode = $editRow.hasClass("editMode");
    //Turn on Edit Mode
    if (hasEditMode) {
        //toggle pencil and okay icons
        //show cancel icon
        $editRow.find("a").first().toggleClass("glyphicon-pencil glyphicon-ok");
        $editRow.find("a").last().show();
        //select td html
        pillar = $editRow.children(".pillar").html();
        datetime = $editRow.children(".datetime").html();
        datetime = new Date(datetime).toDatetimeInputValue();
        //format for input
        duration = $editRow.children(".duration").html();
        quality = $editRow.children(".quality").html();
        notes = $editRow.children(".notes").html();
        //build inputs using td html
        var $pillarInput = $("#pillar").clone().addClass("form-control input-sm");
        $pillarInput.children("option[value='" + pillar + "']").attr("selected", "selected");
        //set selected
        var $datetimeInput = $("<input>").attr("value", datetime).addClass("form-control input-sm").attr("type", "datetime-local");
        var $durationInput = $("<input>").attr("value", duration).addClass("form-control input-sm").attr("type", "text");
        var $qualityInput = $("#quality").clone().addClass("form-control input-sm").css("display", "initial");
        $qualityInput.children("option[value='" + quality + "']").attr("selected", "selected");
        //set selected
        var $notesInput = $("<input>").attr("value", notes).addClass("form-control input-sm").attr("type", "text");
        //empty tds and add inputs
        $editRow.children(".pillar").empty().append($pillarInput);
        $editRow.children(".datetime").empty().append($datetimeInput);
        $editRow.children(".duration").empty().append($durationInput);
        $editRow.children(".quality").empty().append($qualityInput);
        $editRow.children(".notes").empty().append($notesInput);
    } else {
        //input values
        var idI = $editRow.attr("id");
        var pillarI = $editRow.children(".pillar").children().val();
        var datetimeI = encodeURIComponent($editRow.children(".datetime").children().val());
        var durationI = encodeURIComponent($editRow.children(".duration").children().val());
        var qualityI = $editRow.children(".quality").children().val();
        var notesI = encodeURIComponent($editRow.children(".notes").children().val());
        //POST data string
        var data = "user_id=" + idI + "&user_pillar=" + pillarI + "&user_date=" + datetimeI + "&user_duration=" + durationI + "&user_quality=" + qualityI + "&user_notes=" + notesI + "&content=updateEntry";
        //toggle pencil and okay icons
        //hide cancel icon
        $editRow.find("a").first().toggleClass("glyphicon-pencil glyphicon-ok");
        $editRow.find("a").last().hide();
        // console.log(data);
        $.ajax({
            type: "POST",
            url: "functions.php",
            data: data,
            dataType: "json",
            success: function(response) {
                //replace inputs with new tds
                $("#" + response.id).children(".pillar").replaceWith("<td class='pillar'>" + response.pillar + "</td>");
                $("#" + response.id).children(".datetime").replaceWith("<td class='datetime'>" + datetimeFormat(response.event_date) + "</td>");
                $("#" + response.id).children(".duration").replaceWith("<td class='duration'>" + response.duration + "</td>");
                $("#" + response.id).children(".quality").replaceWith("<td class='quality'>" + response.quality + "</td>");
                $("#" + response.id).children(".notes").replaceWith("<td class='notes'>" + response.notes + "</td>");
                $("#dayTable").trigger("update");
            }
        });
    }
});

// Using Event Delegation...https://learn.jquery.com/events/event-delegation/
//Cancel DayTable Edit
$("#dayTable").on("click", ".cancel", function() {
    //remove edit mode
    var $editRow = $(this).closest("tr");
    //Toggle Edit Mode
    //Toggle Pencil / Okay icons
    //hide cancel button
    $editRow.toggleClass("editMode");
    $(this).siblings().toggleClass("glyphicon-pencil glyphicon-ok");
    $(this).hide();
    //inputs back to original tds
    $editRow.children(".pillar").replaceWith("<td class='pillar'>" + pillar + "</td>");
    $editRow.children(".datetime").replaceWith("<td class='datetime'>" + datetimeFormat(datetime) + "</td>");
    $editRow.children(".duration").replaceWith("<td class='duration'>" + duration + "</td>");
    $editRow.children(".quality").replaceWith("<td class='quality'>" + quality + "</td>");
    $editRow.children(".notes").replaceWith("<td class='notes'>" + notes + "</td>");
});

//Edit Rows on summaryTable
$("#summaryTable").on("click", ".okay", function() {
    var $editRow = $(this).closest("tr");
    //Toggle Edit Mode
    $editRow.toggleClass("editMode");
    //Is edit mode active?
    var hasEditMode = $editRow.hasClass("editMode");
    //Turn on Edit Mode
    if (hasEditMode) {
        //toggle pencil and okay icons
        //show cancel icon
        $editRow.find("a").first().toggleClass("glyphicon-pencil glyphicon-ok");
        $editRow.find("a").last().show();
        //select td html
        date = $editRow.children(".date").html();
        date = new Date(date).toDateInputValue();
        quality = $editRow.children(".quality").html();
        notes = $editRow.children(".notes").html();
        //build inputs using td html
        var $dateInput = $("<input>").attr("value", date).addClass("form-control input-sm").attr("type", "date");
        var $qualityInput = $("#quality").clone().addClass("form-control input-sm").css("display", "initial");
        $qualityInput.children("option[value='" + quality + "']").attr("selected", "selected");
        //set selected
        var $notesInput = $("<input>").attr("value", notes).addClass("form-control input-sm").attr("type", "text");
        //empty tds and add inputs
        $editRow.children(".date").empty().append($dateInput);
        $editRow.children(".quality").empty().append($qualityInput);
        $editRow.children(".notes").empty().append($notesInput);
    } else {
        //input values
        var idI = $editRow.attr("id");
        var dateI = encodeURIComponent($editRow.children(".date").children().val());
        var qualityI = $editRow.children(".quality").children().val();
        var notesI = encodeURIComponent($editRow.children(".notes").children().val());
        //build data string
        var data = "user_id=" + idI + "&user_date=" + dateI + "&user_quality=" + qualityI + "&user_notes=" + notesI + "&content=updateSummary";
        //toggle pencil and okay icons
        //hide cancel icon
        $editRow.find("a").first().toggleClass("glyphicon-pencil glyphicon-ok");
        $editRow.find("a").last().hide();
        $.ajax({
            type: "POST",
            url: "functions.php",
            data: data,
            dataType: "json",
            success: function(response) {
                // console.log(response);
                $("#" + response.id).children(".date").replaceWith("<td class='date'>" + response.event_date.toDateFormat() + "</td>");
                $("#" + response.id).children(".quality").replaceWith("<td class='quality'>" + response.quality + "</td>");
                $("#" + response.id).children(".notes").replaceWith("<td class='notes'>" + response.notes + "</td>");
                $("#summaryTable").trigger("update");
            }
        });
    }
});

// Using Event Delegation... https://learn.jquery.com/events/event-delegation/
//Cancel DayTable Edit
$("#summaryTable").on("click", ".cancel", function() {
    //remove edit mode
    var $editRow = $(this).closest("tr");
    //Toggle Edit Mode
    //Toggle Pencil / Okay icons
    //hide cancel button
    $editRow.toggleClass("editMode");
    $(this).siblings().toggleClass("glyphicon-pencil glyphicon-ok");
    $(this).hide();
    //inputs back to original tds
    $editRow.children(".date").replaceWith("<td class='date'>" + date.toDateFormat() + "</td>");
    $editRow.children(".quality").replaceWith("<td class='quality'>" + quality + "</td>");
    $editRow.children(".notes").replaceWith("<td class='notes'>" + notes + "</td>");
});

var chartsApp = angular.module("chartsApp", [ "ui.router" ]);

chartsApp.config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise("/stacked");
    $stateProvider.state("stackedState", {
        url: "/stacked",
        templateUrl: "partials/stacked.html",
        controller: "StackedCtrl"
    });
    $stateProvider.state("donutState", {
        url: "/donut",
        templateUrl: "partials/donut.html",
        controller: "DonutCtrl"
    });
    $stateProvider.state("activityState", {
        url: "/activity",
        templateUrl: "partials/activity.html",
        controller: "ActivityCtrl"
    });
    $stateProvider.state("weeklyActivityState", {
        url: "/weekly-activity",
        templateUrl: "partials/weekly_activity.html",
        controller: "WeeklyActivityCtrl"
    });
    $stateProvider.state("annualCalendarState", {
        url: "/annual-calendar",
        templateUrl: "partials/annual_calendar.html",
        controller: "AnnualCalendarCtrl"
    });
});

chartsApp.controller("ActivityCtrl", [ "$scope", "$http", function($scope, $http) {
    $scope.today = new Date(Date.now());
    var todayJSON = $scope.today.toJSONLocal();
    var update = function(url) {
        $http.get(url).success(function(response) {
            $scope.activity = {
                data: response
            };
        });
    };
    update("functions.php?content=pillarsLog&startDay=" + todayJSON + "&endDay=" + todayJSON + "T23%3A59%3A59");
    $scope.newDay = function() {
        todayJSON = $scope.today.toJSONLocal();
        update("functions.php?content=pillarsLog&startDay=" + todayJSON + "&endDay=" + todayJSON + "T23%3A59%3A59");
    };
} ]);

chartsApp.controller("AnnualCalendarCtrl", [ "$scope", "$http", function($scope, $http) {
    $scope.today = new Date(Date.now());
    $scope.lastYear = addDays(today, -365);
    var todayJSON = $scope.today.toJSONLocal();
    var lastYearJSON = $scope.lastYear.toJSONLocal();
    todayUTC = makeUTCDate(todayJSON);
    todayJSON = todayUTC.toJSONLocal() + "T23:59:59";
    var update = function(url) {
        $http.get(url).success(function(response) {
            $scope.annualCalendar = {
                data: response
            };
        });
    };
    update("functions.php?content=pillarsLog&startDay=" + lastYearJSON + "&endDay=" + todayJSON + "T23%3A59%3A59");
} ]);

chartsApp.controller("DonutCtrl", [ "$scope", "$http", function($scope, $http) {
    $scope.today = new Date(Date.now());
    var todayJSON = $scope.today.toJSONLocal();
    $scope.donut = {
        data: [ {
            pillar: "No Data",
            duration: "1"
        }, {
            pillar: "NO DATA",
            duration: "1"
        }, {
            pillar: "NO DATA",
            duration: "1"
        }, {
            pillar: "NO DATA",
            duration: "1"
        }, {
            pillar: "NO DATA",
            duration: "1"
        }, {
            pillar: "NO DATA",
            duration: "1"
        }, {
            pillar: "NO DATA",
            duration: "1"
        } ]
    };
    $http.get("functions.php?content=dayCumulativeDuration&startDay=" + todayJSON + "&endDay=" + todayJSON + "T23%3A59%3A59").success(function(response) {
        $scope.donut = {
            data: response
        };
    });
    $scope.update = function() {
        todayJSON = $scope.today.toJSONLocal();
        $http.get("functions.php?content=dayCumulativeDuration&startDay=" + todayJSON + "&endDay=" + todayJSON + "T23%3A59%3A59").success(function(response) {
            $scope.donut = {
                data: response
            };
        });
    };
} ]);

chartsApp.controller("StackedCtrl", [ "$scope", "$http", function($scope, $http) {
    $scope.today = new Date(Date.now());
    $scope.today.setDate($scope.today.getDate() - 6);
    var prevWeekJSON = $scope.today.toJSONLocal();
    var endDayJSON = makeUTCDate(prevWeekJSON);
    endDayJSON = addDays(endDayJSON, 6).toJSONLocal() + "T23:59:59";
    $http.get("functions.php?content=pillarsLog&startDay=" + prevWeekJSON + "&endDay=" + endDayJSON).success(function(response) {
        $scope.stacked = {
            data: response
        };
    });
    $scope.update = function() {
        prevWeekJSON = $scope.today.toJSONLocal();
        var endDayJSON = makeUTCDate(prevWeekJSON);
        endDayJSON = addDays(endDayJSON, 6).toJSONLocal() + "T23:59:59";
        $http.get("functions.php?content=pillarsLog&startDay=" + prevWeekJSON + "&endDay=" + endDayJSON).success(function(response) {
            $scope.stacked = {
                data: response
            };
        });
    };
} ]);

chartsApp.controller("WeeklyActivityCtrl", [ "$scope", "$http", function($scope, $http) {
    $scope.today = new Date(Date.now());
    $scope.today.setDate($scope.today.getDate() - 6);
    var prevWeekJSON = $scope.today.toJSONLocal();
    var endDayJSON = makeUTCDate(prevWeekJSON);
    endDayJSON = addDays(endDayJSON, 6).toJSONLocal() + "T23:59:59";
    var update = function(url) {
        $http.get(url).success(function(response) {
            $scope.weeklyActivity = {
                data: response
            };
        });
    };
    update("functions.php?content=pillarsLog&startDay=" + prevWeekJSON + "&endDay=" + endDayJSON + "T23%3A59%3A59");
    $scope.newDay = function() {
        prevWeekJSON = $scope.today.toJSONLocal();
        var endDayJSON = makeUTCDate(prevWeekJSON);
        endDayJSON = addDays(endDayJSON, 6).toJSONLocal() + "T23:59:59";
        update("functions.php?content=pillarsLog&startDay=" + prevWeekJSON + "&endDay=" + endDayJSON + "T23%3A59%3A59");
    };
} ]);

$("body").on("change", "#datePicker", function() {
    //update Table
    // console.log("Updating Table...");
    var selectedDate = $(this).val();
    buildTable(selectedDate);
    $("svg").remove();
    donutChart(selectedDate);
});

//add tablesorter to dayTable
$("#dayTable").tablesorter({
    headers: {
        0: {
            sorter: false
        }
    }
});

//Set Default Date to Today
$("#datePicker").val(new Date().toDateInputValue());

//Initialize Day Table with Today's Data
var startToday = new Date(Date.now()).toJSONLocal();

buildTable(startToday);

//Set default date for entry form
$("body").on("click", "#add-entry", function() {
    //if there is a tr
    if ($("#dayTable TBODY").children().is("tr")) {
        //set default date input to previous date+duration
        var lastDatetime = $("#dayTable TBODY tr").last().children("td[class='datetime']").text();
        var lastDuration = $("#dayTable TBODY tr").last().children("td[class='duration']").text();
        var newDatetime = new Date(lastDatetime);
        newDatetime = newDatetime.addMinutes(durationToMinutes(lastDuration));
        $("#date").val(newDatetime.toDatetimeInputValue());
        //set duration to null
        $("#duration").val("");
    } else {
        //set default date to today's date at 12am
        $("#date").val($("#datePicker").val() + "T00:00:00");
    }
});

chartsApp.directive("activityChart", function() {
    function link(scope, element, attr) {
        var margin = {
            top: 20,
            right: 35,
            bottom: 20,
            left: 35
        };
        var height = 156 - margin.bottom - margin.top;
        var width = 500 - margin.right - margin.left;
        var svg = d3.select(element[0]).append("svg").attr("height", height + margin.top + margin.bottom).attr("width", width + margin.right + margin.left).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        //left side bounding line
        svg.append("line").attr("x1", 0).attr("x2", 0).attr("y1", 0).attr("y2", height - 15).attr("stroke", "black").attr("stroke-width", 1).attr("class", "activitybound");
        //top side bounding line
        svg.append("line").attr("x1", 0).attr("x2", width).attr("y1", 0).attr("y2", 0).attr("stroke", "black").attr("stroke-width", 1).attr("class", "activitybound");
        //right side bounding line
        svg.append("line").attr("x1", width).attr("x2", width).attr("y1", 0).attr("y2", height - 15).attr("stroke", "black").attr("stroke-width", 1).attr("class", "activitybound");
        var xScale = d3.time.scale().range([ 0, width ]);
        var hourAxis = d3.svg.axis().scale(xScale).tickFormat(d3.time.format("%I %p"));
        var dateAxis = d3.svg.axis().scale(xScale).tickPadding(20).tickFormat(function(d) {
            //only 12AM gets date label
            var formatter;
            if (d.getHours() === 0) {
                formatter = d3.time.format("%x");
            } else {
                return null;
            }
            return formatter(d);
        });
        scope.$watch("data", function(data) {
            if (!data) return;
            d3.selectAll(".activityaxis").remove();
            var startDay = makeUTCDate(new Date(data[0].event_date.substr(0, 10)));
            var endDay = addDays(startDay, 1);
            var bars = svg.selectAll("rect").data(data);
            xScale.domain([ startDay, endDay ]);
            svg.append("g").attr("class", "activityaxis").attr("transform", "translate(0" + "," + (height - 15) + ")").call(hourAxis);
            svg.append("g").attr("class", "activityaxis").attr("transform", "translate(0" + "," + (height - 15) + ")").call(dateAxis);
            bars.enter().append("rect").attr("height", 100).attr("width", function(d) {
                //make event_date string into a date starting at T00:00:00
                var durationy = makeUTCDate(d.event_date.substr(0, 10));
                //convert duration to a date object for xScale
                durationy = durationy.addMinutes(durationToMinutes(d.duration));
                return xScale(durationy);
            }).attr("y", height - 115).attr("x", function(d) {
                return xScale(new Date(d.event_date));
            }).attr("fill", function(d) {
                //color determined by pillar name
                if (d.pillar == "ZAZEN") {
                    return "#98abc5";
                } else if (d.pillar == "WORK") {
                    return "#8a89a6";
                } else if (d.pillar == "SOCIAL") {
                    return "#7b6888";
                } else if (d.pillar == "LEARN") {
                    return "#6b486b";
                } else if (d.pillar == "BIKE") {
                    return "#a05d56";
                } else if (d.pillar == "EAT WELL") {
                    return "#d0743c";
                } else if (d.pillar == "SLACK") {
                    return "#ff8c00";
                }
            }).on("mouseover", function(d) {
                scope.$apply(function() {
                    scope.selected = d;
                });
            }).on("mouseout", function() {
                scope.$apply(function() {
                    scope.selected = null;
                });
            });
            bars.exit().remove();
            //update
            bars.transition().attr("width", function(d) {
                //make event_date string into a date starting at T00:00:00
                var durationy = makeUTCDate(d.event_date.substr(0, 10));
                //convert duration to a date object for xScale
                durationy = durationy.addMinutes(durationToMinutes(d.duration));
                return xScale(durationy);
            }).transition().attr("fill", function(d) {
                //color determined by pillar name
                if (d.pillar == "ZAZEN") {
                    return "#98abc5";
                } else if (d.pillar == "WORK") {
                    return "#8a89a6";
                } else if (d.pillar == "SOCIAL") {
                    return "#7b6888";
                } else if (d.pillar == "LEARN") {
                    return "#6b486b";
                } else if (d.pillar == "BIKE") {
                    return "#a05d56";
                } else if (d.pillar == "EAT WELL") {
                    return "#d0743c";
                } else if (d.pillar == "SLACK") {
                    return "#ff8c00";
                }
            }).transition().attr("x", function(d) {
                return xScale(new Date(d.event_date));
            });
        });
    }
    return {
        restrict: "E",
        scope: {
            data: "=data",
            selected: "="
        },
        link: link
    };
});

chartsApp.directive("annualCalendar", function() {
    return {
        restrict: "E",
        scope: {
            data: "="
        },
        link: function(scope, element, attrs) {
            var calendar = [];
            var yAxis = [];
            var today = new Date(Date.now());
            var lastYear = addDays(today, -365);
            var col = 0;
            var month = lastYear.getMonth();
            var x = true;
            var monthFormatter = d3.time.format("%b");
            for (i = 0; i < 366; i++) {
                dateString = lastYear.toJSONLocal();
                var date = makeUTCDate(dateString);
                var c = date.getDay();
                if (c === 0 && date.getMonth() === 0 && x) {
                    month = -1;
                    x = !x;
                }
                if (c === 0 && date.getMonth() > month) {
                    yAxis.push({
                        col: col,
                        month: monthFormatter(date)
                    });
                    month++;
                }
                calendar.push({
                    date: date,
                    count: 0,
                    col: col
                });
                lastYear = addDays(lastYear, 1);
                if (c === 6) {
                    col++;
                }
            }
            var margin = {
                top: 20,
                right: 20,
                bottom: 20,
                left: 20
            };
            var width = 11 + 53 * 13;
            var height = 11 + 13 * 6;
            var svg = d3.select(element[0]).append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
            //Lazy y-axis from GitHub's commit calendar
            svg.append("text").text("M").style("fill", "#ccc").attr("text-anchor", "middle").attr("dx", "-10").attr("dy", "22");
            svg.append("text").text("W").style("fill", "#ccc").attr("text-anchor", "middle").attr("dx", "-10").attr("dy", "48");
            svg.append("text").text("F").attr("text-anchor", "middle").style("fill", "#ccc").attr("dx", "-10").attr("dy", "74");
            //Prepare Calendar
            svg.selectAll("rect").data(calendar).enter().append("rect").attr("width", 11).attr("height", 11).attr("x", function(d, i) {
                return d.col * 13;
            }).attr("y", function(d, i) {
                return d.date.getDay() * 13;
            }).attr("fill", "#eeeeee");
            var colorScale = d3.scale.ordinal().range([ "#ffaf4d", "#ff981a", "#e67e00", "#b36200" ]);
            svg.selectAll(".y").data(yAxis).enter().append("text").text(function(d) {
                return d.month;
            }).attr("dy", -5).attr("dx", function(d) {
                return d.col * 13;
            }).attr("fill", "#ccc");
            var minMonth = calendar[0].date.get;
            scope.$watch("data", function(newVal, oldVal) {
                if (!newVal) return;
                var events = {};
                var l = newVal.length;
                while (l--) {
                    var currentDate = newVal[l].event_date.substr(0, 10);
                    if (!events[currentDate]) {
                        events[currentDate] = 0;
                    }
                    events[currentDate]++;
                }
                for (var i = 0; i < calendar.length; i++) {
                    if (events[calendar[i].date.toJSONLocal()]) {
                        calendar[i].count = events[calendar[i].date.toJSONLocal()];
                    }
                }
                colorScale.domain(d3.extent(calendar, function(d) {
                    return d.count === 0 ? null : d.count;
                }));
                svg.selectAll("rect").attr("fill", function(d, i) {
                    if (d.count === 0) return "#eee"; else {
                        return colorScale(d.count);
                    }
                });
                // console.log("EVENTS:");
                // console.log(events);
                // console.log("CALENDAR:");
                // console.log(calendar);
                // console.log("Y AXIS:");
                // console.log(yAxis);
                // console.log(yAxis.length);
            });
        }
    };
});

chartsApp.directive("donutChart", function() {
    function link(scope, element, attr) {
        var height = 500;
        var width = 500;
        var radius = Math.min(width, height) / 2;
        var svg = d3.select(element[0]).append("svg");
        svg.attr({
            height: height,
            width: width
        });
        var color = d3.scale.ordinal().range([ "#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00" ]);
        var arc = d3.svg.arc().innerRadius(radius * 0.5).outerRadius(radius * 0.9);
        var pie = d3.layout.pie().sort(null).value(function(d) {
            return d.duration;
        });
        var donut = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
        function arcTween(a) {
            var i = d3.interpolate(this._current, a);
            this._current = i(0);
            return function(t) {
                return arc(i(t));
            };
        }
        scope.$watch("data", function(data) {
            if (!data) return;
            //add all durations
            var sum = 0;
            data.forEach(function(d) {
                sum += +d.duration;
            });
            //remove 'no data' if exists
            d3.selectAll("text").remove();
            //if sum of durations = 0 add 'no data' and return
            if (sum === 0) {
                d3.selectAll("path").remove();
                svg.append("text").attr("x", width / 2).attr("y", height / 2).attr("text-anchor", "middle").text("No Data");
                return;
            }
            // bind the data
            var arcs = donut.selectAll("path").data(pie(data));
            // enter
            arcs.enter().append("path").attr("fill", function(d, i) {
                return color(i);
            }).attr("d", arc).each(function(d) {
                this._current = d;
            }).on("mouseover", function(d) {
                svg.append("text").attr("x", width / 2).attr("y", height / 2).attr("text-anchor", "middle").text(d.data.pillar);
                svg.append("text").attr("x", width / 2).attr("y", height / 2 - 10).attr("text-anchor", "middle").text(d.data.duration);
            }).on("mouseout", function(d) {
                d3.selectAll("text").remove();
            });
            // update
            arcs.transition().duration(500).ease("linear").attrTween("d", arcTween);
        });
    }
    return {
        restrict: "E",
        scope: {
            data: "=data"
        },
        link: link
    };
});

chartsApp.directive("stackedBarChart", function() {
    function link(scope, element, attrs) {
        //Conventional D3 Margin
        var margin = {
            top: 20,
            right: 30,
            bottom: 30,
            left: 40
        }, width = 970 - margin.left - margin.right, height = 530 - margin.top - margin.bottom;
        var yScale = d3.scale.linear().domain([ 0, 24 ]).range([ 0, height ]);
        var xScale = d3.time.scale.utc().range([ 0, width ]);
        var yAxis = d3.svg.axis().orient("left").ticks(24).scale(yScale);
        //Boilerplate chart append
        var chart = d3.select(element[0]).append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        var color = d3.scale.ordinal().range([ "#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00" ]);
        //http://bl.ocks.org/mbostock/3886208
        //Append y axis
        chart.append("g").attr("class", "y axis").attr("transform", "translate(-1,0)").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("x", -455).attr("dy", ".71em").style("text-anchor", "end").text("Hours");
        scope.$watch("data", function(response) {
            if (!response) return;
            //remove pre-existing axes
            d3.selectAll(".x.axis").remove();
            d3.selectAll(".g").remove();
            var curDate = response[0].event_date.substr(0, 10);
            var count = 0;
            var zazenHours = makeUTCDate("1990-09-13T00:00:00");
            var workHours = makeUTCDate("1990-09-13T00:00:00");
            var socialHours = makeUTCDate("1990-09-13T00:00:00");
            var learnHours = makeUTCDate("1990-09-13T00:00:00");
            var bikeHours = makeUTCDate("1990-09-13T00:00:00");
            var eatwellHours = makeUTCDate("1990-09-13T00:00:00");
            var slackHours = makeUTCDate("1990-09-13T00:00:00");
            var dates = [];
            response.forEach(function(item) {
                //if item is current day
                if (item.event_date.substr(0, 10) === curDate) {
                    //add 1 to the event counter
                    count++;
                    //add duration to the
                    if (item.pillar === "ZAZEN") {
                        //candidate for improvement
                        zazenHours = zazenHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "WORK") {
                        workHours = workHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "SOCIAL") {
                        socialHours = socialHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "LEARN") {
                        learnHours = learnHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "BIKE") {
                        bikeHours = bikeHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "EAT WELL") {
                        eatwellHours = eatwellHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "SLACK") {
                        slackHours = slackHours.addMinutes(durationToMinutes(item.duration));
                    }
                } else {
                    dates.push({
                        date: makeUTCDate(curDate),
                        events: count,
                        duration: {
                            zazen: zazenHours,
                            work: workHours,
                            social: socialHours,
                            learn: learnHours,
                            bike: bikeHours,
                            eatwell: eatwellHours,
                            slack: slackHours
                        }
                    });
                    count = 1;
                    curDate = item.event_date.substr(0, 10);
                    zazenHours = makeUTCDate("1990-09-13T00:00:00");
                    workHours = makeUTCDate("1990-09-13T00:00:00");
                    socialHours = makeUTCDate("1990-09-13T00:00:00");
                    learnHours = makeUTCDate("1990-09-13T00:00:00");
                    bikeHours = makeUTCDate("1990-09-13T00:00:00");
                    eatwellHours = makeUTCDate("1990-09-13T00:00:00");
                    slackHours = makeUTCDate("1990-09-13T00:00:00");
                    if (item.pillar === "ZAZEN") {
                        zazenHours = zazenHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "WORK") {
                        workHours = workHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "SOCIAL") {
                        socialHours = socialHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "LEARN") {
                        learnHours = learnHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "BIKE") {
                        bikeHours = bikeHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "EAT WELL") {
                        eatwellHours = eatwellHours.addMinutes(durationToMinutes(item.duration));
                    } else if (item.pillar === "SLACK") {
                        slackHours = slackHours.addMinutes(durationToMinutes(item.duration));
                    }
                }
            });
            dates.push({
                date: makeUTCDate(curDate),
                events: count,
                duration: {
                    zazen: zazenHours,
                    work: workHours,
                    social: socialHours,
                    learn: learnHours,
                    bike: bikeHours,
                    eatwell: eatwellHours,
                    slack: slackHours
                }
            });
            /////////////////////
            // BEGIN D3 /////////
            /////////////////////
            //Convert each duration to hours.minutes format
            dates.forEach(function(item) {
                for (var key in item.duration) {
                    item.duration[key + "hDM"] = item.duration[key].toHoursDotMinutes();
                }
            });
            //Set minimum and maximum date for input domain
            var minDate = dates[0].date;
            var maxDate = dates[dates.length - 1].date;
            // candidates for improvement...
            // explain why I'm using .utc()
            if (dates.length < 7) {
                xScale.domain([ minDate, d3.time.day.utc.offset(maxDate, 1 + (7 - dates.length)) ]);
            } else {
                xScale.domain([ minDate, d3.time.day.utc.offset(maxDate, 1) ]);
            }
            var xAxis = d3.svg.axis().orient("top").ticks(d3.time.days, 1).tickFormat(d3.time.format("%a, %m/%d")).scale(xScale);
            var barWidth = width / dates.length;
            if (dates.length < 7) {
                barWidth = width / (dates.length + (7 - dates.length));
            }
            //set domain of color to be duration names that do not contain hDM
            // key.indexOf("hDM") returns -1 if "hDM" is not in string
            color.domain(d3.keys(dates[0].duration).filter(function(key) {
                return key.indexOf("hDM") === -1;
            }));
            //calculate y positions for data
            dates.forEach(function(d) {
                var y0 = 0;
                d.duration.pillars = color.domain().map(function(name) {
                    return {
                        name: name,
                        y0: y0,
                        y1: y0 += +d.duration[name + "hDM"],
                        duration: d.duration[name]
                    };
                });
                d.total = d.duration.pillars[d.duration.pillars.length - 1].y1;
            });
            //Append x axis
            chart.append("g").attr("class", "x axis").attr("transform", "translate(0,-1)").call(xAxis);
            var dateBars = chart.selectAll(".dateBar").data(dates);
            dateBars.enter().append("g").attr("class", "g").attr("transform", function(d) {
                return "translate(" + xScale(d.date) + ",0)";
            });
            var singleBar = dateBars.selectAll("rect").data(function(d) {
                return d.duration.pillars;
            });
            singleBar.enter().append("rect").attr("width", barWidth - 1).attr("y", function(d) {
                return yScale(d.y0);
            }).attr("height", function(d) {
                return yScale(d.y1) - yScale(d.y0);
            }).style("fill", function(d) {
                return color(d.name);
            }).on("mouseover", function(d) {
                d3.select(this).style("fill", "orange");
                chart.append("text").attr("id", "tooltip").attr("x", 450).attr("y", height).attr("text-anchor", "middle").attr("font-family", "sans-serif").attr("font-size", "15px").attr("font-weight", "bold").attr("fill", "black").text("Pillar: " + d.name + " Duration: " + d.duration.toChartDurationFormat());
            }).on("mouseout", function(d) {
                d3.select(this).transition().duration(250).style("fill", function(d) {
                    return color(d.name);
                });
                d3.select("#tooltip").remove();
            });
            var legend = chart.selectAll(".legend").data(color.domain()).enter().append("g").attr("class", "legend").attr("transform", function(d, i) {
                return "translate(0," + i * 20 + ")";
            });
            legend.append("rect").attr("x", width - 18).attr("y", 350).attr("width", 18).attr("height", 18).style("fill", color);
            legend.append("text").attr("x", width - 24).attr("y", 359).attr("dy", ".35em").style("text-anchor", "end").text(function(d) {
                return d;
            });
            $(".x.axis").children("g").last().remove();
        });
    }
    return {
        restrict: "E",
        scope: {
            data: "=data"
        },
        link: link
    };
});

chartsApp.directive("weeklyActivityChart", function() {
    function link(scope, element, attrs) {
        //Conventional D3 Margin
        var margin = {
            top: 20,
            right: 30,
            bottom: 30,
            left: 40
        }, width = 970 - margin.left - margin.right, height = 530 - margin.top - margin.bottom;
        var yScale = d3.scale.linear().domain([ 0, 24 ]).range([ 0, height ]);
        var xScale = d3.time.scale.utc().range([ 0, width ]);
        var yAxis = d3.svg.axis().orient("left").ticks(24).scale(yScale);
        //Boilerplate chart append
        var chart = d3.select(element[0]).append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        //Append y axis
        chart.append("g").attr("class", "y axis").attr("transform", "translate(-1,0)").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("x", -455).attr("dy", ".71em").style("text-anchor", "end").text("Hours");
        scope.$watch("data", function(response) {
            if (!response) return;
            //remove pre-existing axes
            d3.selectAll(".x.axis").remove();
            d3.selectAll(".g").remove();
            //prepare data
            var data = d3.nest().key(function(d) {
                return d.event_date.substr(0, 10);
            }).entries(response).map(function(d, i) {
                d.values.forEach(function(item) {
                    //Convert each duration to hours.minutes format
                    item.durationhDM = item.duration.toHoursDotMinutes();
                    //Calculate y0 and y1 for event
                    item.y0 = getY0(item.event_date);
                    item.y1 = item.y0 + item.durationhDM;
                });
                return {
                    date: makeUTCDate(d.key),
                    events: d.values
                };
            });
            // Using d3.map ...interesting approach and its promising however it
            //doesnt return array but an object, making it not useful for .data()
            // var  data = d3.nest()
            //     .key(function(d){
            //     return d.event_date.substr(0,10);
            //     })
            //     .map(response, d3.map);
            /////////////////////
            // BEGIN D3 /////////
            /////////////////////
            //Set minimum and maximum date for input domain
            var minDate = data[0].date;
            var maxDate = data[data.length - 1].date;
            // candidates for improvement...
            // explain why I'm using .utc()
            if (data.length < 7) {
                xScale.domain([ minDate, d3.time.day.utc.offset(maxDate, 1 + (7 - data.length)) ]);
            } else {
                xScale.domain([ minDate, d3.time.day.utc.offset(maxDate, 1) ]);
            }
            var xAxis = d3.svg.axis().orient("top").ticks(d3.time.days, 1).tickFormat(d3.time.format("%a, %m/%d")).scale(xScale);
            var barWidth = width / data.length;
            if (data.length < 7) {
                barWidth = width / (data.length + (7 - data.length));
            }
            //Append x axis
            chart.append("g").attr("class", "x axis").attr("transform", "translate(0,-1)").call(xAxis);
            var dateBars = chart.selectAll(".dateBar").data(data);
            dateBars.enter().append("g").attr("class", "g").attr("transform", function(d) {
                return "translate(" + xScale(d.date) + ",0)";
            });
            var singleBar = dateBars.selectAll("rect").data(function(d) {
                return d.events;
            });
            singleBar.enter().append("rect").attr("width", barWidth - 1).attr("y", function(d) {
                return yScale(d.y0);
            }).attr("height", function(d) {
                return yScale(d.y1) - yScale(d.y0);
            }).style("fill", function(d) {
                //color determined by pillar name
                if (d.pillar == "ZAZEN") {
                    return "#98abc5";
                } else if (d.pillar == "WORK") {
                    return "#8a89a6";
                } else if (d.pillar == "SOCIAL") {
                    return "#7b6888";
                } else if (d.pillar == "LEARN") {
                    return "#6b486b";
                } else if (d.pillar == "BIKE") {
                    return "#a05d56";
                } else if (d.pillar == "EAT WELL") {
                    return "#d0743c";
                } else if (d.pillar == "SLACK") {
                    return "#ff8c00";
                }
            }).on("mouseover", function(d) {
                d3.select(this).style("fill", "orange");
                chart.append("text").attr("id", "tooltip").attr("x", 450).attr("y", height).attr("text-anchor", "middle").attr("font-family", "sans-serif").attr("font-size", "15px").attr("font-weight", "bold").attr("fill", "black").text("Pillar: " + d.pillar + " Duration: " + d.duration);
            }).on("mouseout", function(d) {
                d3.select(this).transition().duration(250).style("fill", function(d) {
                    //color determined by pillar name
                    if (d.pillar == "ZAZEN") {
                        return "#98abc5";
                    } else if (d.pillar == "WORK") {
                        return "#8a89a6";
                    } else if (d.pillar == "SOCIAL") {
                        return "#7b6888";
                    } else if (d.pillar == "LEARN") {
                        return "#6b486b";
                    } else if (d.pillar == "BIKE") {
                        return "#a05d56";
                    } else if (d.pillar == "EAT WELL") {
                        return "#d0743c";
                    } else if (d.pillar == "SLACK") {
                        return "#ff8c00";
                    }
                });
                d3.select("#tooltip").remove();
            });
            // var legend = chart.selectAll(".legend")
            //   .data(color.domain())
            // .enter().append("g")
            //   .attr("class", "legend")
            //   .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
            //
            // legend.append("rect")
            //     .attr("x", width - 18)
            //     .attr("y", 350)
            //     .attr("width", 18)
            //     .attr("height", 18)
            //     .style("fill", color);
            //
            // legend.append("text")
            //     .attr("x", width - 24)
            //     .attr("y", 359)
            //     .attr("dy", ".35em")
            //     .style("text-anchor", "end")
            //     .text(function(d) { return d; });
            $(".x.axis").children("g").last().remove();
        });
    }
    return {
        restrict: "E",
        scope: {
            data: "="
        },
        link: link
    };
});

$("body").on("click", "#go", function() {
    //update Table
    // console.log("Updating Table...");
    var startSummary = $("#startSummaryPicker").val();
    var endSummary = $("#endSummaryPicker").val();
    buildSummary(startSummary, endSummary);
});

//add tablesorter to summaryTable
$("#summaryTable").tablesorter({
    headers: {
        0: {
            sorter: false
        }
    }
});

//Set Default End Date to Today
$("#endSummaryPicker, #date").val(new Date().toDateInputValue());

var startSummary = new Date();

startSummary.setDate(startSummary.getDate() - 6);

$("#startSummaryPicker").val(startSummary.toDateInputValue());

//Initialize summaryTable with Previous Week's Data
var today = new Date(Date.now());

var endSummary = today.toJSONLocal();

today.setDate(today.getDate() - 6);

var startSummary = today.toJSONLocal();

buildSummary(startSummary, endSummary);
